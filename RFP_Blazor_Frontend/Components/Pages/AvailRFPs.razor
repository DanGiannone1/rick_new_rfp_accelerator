@using RFP_Blazor_Frontend.Helper;
@using RFP_Blazor_Frontend.Models;
@inject RfpClient rfpclient
@rendermode InteractiveServer

<MudList Clickable="true" Style="height:45vh; overflow: auto;">
    <MudListSubheader>
        Available RFPs
    </MudListSubheader>

    @if (_listOfRfps != null)
    {
        foreach (var item in _listOfRfps)
        {
            <MudListItem Icon="@Icons.Material.Filled.Article" OnClick="@(() => OnClickRfp(item))">
                @item
            </MudListItem>
        }
    }
    @* @for (var i = 1; i < 10; i++) // add a bunch of items to test the scroll bars.
    {
        var index = i;
        var name = RfpArray?[i];
        <MudListItem Icon="@Icons.Material.Filled.Article">
            RFP @index
            TEst @RfpArray?[i]
        </MudListItem>
    } *@
</MudList>
<div class="button-container">
    <MudStack>
        <MudToolBar DisableGutters="true" Class="gap-4 z-30">
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Outlined"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context.Id">
                        Select File
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            <MudText Typo="Typo.h6">@selectedFile</MudText>
        </MudToolBar>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary">Upload</MudButton>
    </MudStack>
</div>

@code
{

    private List<string>? _listOfRfps { get; set; }
    public string? SelectedRfp { get; set; }

    List<string> RFPs = new List<string>();
    IList<IBrowserFile> files = new List<IBrowserFile>();
    string selectedFile = "No file selected!";

    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
        selectedFile = file.Name;
        //TODO upload the files to the server
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _listOfRfps = await rfpclient.GetRfpsAsync();
            // Simulate loading data asynchronously (replace with actual data fetching logic)
            //await Task.Delay(1000); // Simulate loading delay

            // Load data or perform initialization
            // items = new List<string> { "Item 1", "Item 2", "Item 3" };

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting Artifact from endpoint: {ex.Message}");
            // Handle or log the exception as needed
        }
    }

    private async Task OnClickRfp(string clickedItem)
    {
        try
        {
            // Do something with the clickedItem value
            this.SelectedRfp = clickedItem;
            Console.WriteLine($"RFP Item clicked: {clickedItem}");

            // Assuming rfpclient is a service injected into the component
            var rfpResponse = await rfpclient.SelectRfpAsync(clickedItem);
            Console.WriteLine($"SelectRfp Called: response {rfpResponse}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error selecting RFP: {ex.Message}");
            // Handle or log the exception as needed
        }

    }
}
