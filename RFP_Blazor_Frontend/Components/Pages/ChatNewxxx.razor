@using System.Collections.Generic
@using Microsoft.AspNetCore.Components
@using Utils.Helpers
@rendermode InteractiveServer

<style>
    .clearChatBroom {
        box-sizing: border-box;
        margin-top:55px;
        padding: 8px;
        width: 40px;
        height: 40px;
        left: 12px;
        top: 66px;
        color: #FFFFFF;
        border: 1px solid #D1D1D1;
        border-radius: 20px;
        z-index: 1;
    }
</style>
<MudStack>
    <MudPaper Elevation="12" Class="pa-4" Style="height:vh" >
        <div id="another_unique_identifier" class="ma-0" style="height:15vh;overflow: auto;">
            <MudStack>
                @if (chatHistory.Count > 0)
                {
                    for (int i = 0; i < chatHistory.Count; i++)
                    {
                        var index = i;
                        var chatQuestion = chatHistory[index];
                        var aiReply = aiResponse[index];
                        <UserQuestionComp StatusText="@chatQuestion" />
                        <AIResponseComp StatusText="@aiReply"  />

                    }
                }
            </MudStack>
        </div>
    </MudPaper>
        <MudStack Row="true" Style="background: #FFFFFF;">
            <MudSpacer  />
            <div role="button" tabindex="0" aria-label="Clear session" @onclick="ClearChat">
                <svg class="clearChatBroom" aria-hidden="true" fill="currentColor" width="1em" height="1em" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" style="@(chatHistory.Count > 0 ? "background: radial-gradient(109.81% 107.82% at 100.1% 90.19%, #0F6CBD 33.63%, #2D87C3 70.31%, #8DDDD8 100%);" : "background: rgb(189, 189, 189);")">
                    <path d="M17.91 2.18c.2.2.2.51 0 .7l-5.32 5.33a4.5 4.5 0 0 1-.34 6l-.66.66-2.09 3.48a.5.5 0 0 1-.78.1l-7.07-7.08a.5.5 0 0 1 .1-.78L5.22 8.5l.66-.66a4.5 4.5 0 0 1 5.99-.34l5.32-5.32c.2-.2.51-.2.71 0ZM6.24 8.9l4.95 4.95.36-.35A3.5 3.5 0 1 0 6.6 8.55l-.36.35Zm-.78.63L2.8 11.12l6.16 6.17 1.6-2.66-5.11-5.1Z" fill="currentColor"></path>
                </svg>
            </div>
            <MudTextField @bind-Value="value" OnKeyDown="OnKeyDown" Label="Type a new question" Lines="3" TextUpdateSuppression="false" Style="background: #FFFFFF;" Variant="Variant.Outlined" OnAdornmentClick="AdornmentOnClick" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" />
            <MudSpacer />
        </MudStack>

</MudStack>




@code {
    string? value;
    private List<string> chatHistory = new();
    private List<string> aiResponse = new();

    private async Task ClearChat()
    {
        await Task.Delay(100);
        chatHistory.Clear();
        aiResponse.Clear();
        StateHasChanged();
    }

    private async Task AdornmentOnClick()
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            chatHistory.Add(value);
            aiResponse.Add(Constants.SampleAIResponse); // Add a fake AI response for testing the UI
            value = string.Empty;
            StateHasChanged();
        }
        await Task.Delay(1);
    }

    private async Task OnKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter" && !string.IsNullOrWhiteSpace(value))
        {
            chatHistory.Add(value);
            aiResponse.Add(Constants.SampleAIResponse); // Add a fake AI response for testing the UI
            value = string.Empty;
            StateHasChanged();
        }
        await Task.Delay(1);
    }



    // async void ClearChat()
    // {
    //     await Task.Delay(100);
    //     chatHistory.Clear();
    //     aiResponse.Clear();
    //     StateHasChanged();
    // }

    // async void AdornmentOnClick()
    // {
    //     if (value != String.Empty && value != null)
    //     {
    //         chatHistory.Add(value);
    //         aiResponse.Add(Constants.SampleAIResponse); // lets add a fake AI response testing the UI 
    //     }
    //     await Task.Delay(100);
    //     value = String.Empty;
    //     _textValue = "AdornmentClicked";
    //     StateHasChanged();
    // }

    // async void OnKeyDown(KeyboardEventArgs args)
    // {
    //     if (args.Key == "Enter")
    //     {
    //         await Task.Delay(100);
    //         // need to pass the value to the AI before setting it to ""

    //         value = "";
    //         StateHasChanged();
    //     }
    // }

}
